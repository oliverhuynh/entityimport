<?php

/**
 * Implementation of hook_menu().
 */
function entityimport_menu() {
  $items = array();
  $items['admin/content/import'] = array(
    'title' => 'Entity Import',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('entityimport_import_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'entityimport.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );
  $items['keywords/autocomplete'] = array(
    'page callback' => 'entityimport_keywords_retrieve',
    'page arguments' => array(2),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'entityimport.pages.inc',
  );
  $import_maps = module_invoke_all("import_map");
  foreach ($import_maps as $import_map => $label) {
    $settings = entityimport_my_get_settings($import_map);
    if ($settings['single']) {
      $items['admin/content/import/' . $import_map] = $items['admin/content/import'];
      $items['admin/content/import/' . $import_map]['title'] = t("!type import", array('!type' => $label));
    }
  }

  return $items;
}

/**
 * Implementation of hook_hierarchical_select_params().
 */
function entityimport_hierarchical_select_params() {
  $params = array();
  return $params;
}

/**
 * Implements hook_hierarchical_select_root_level().
 */
function entityimport_hierarchical_select_root_level($params) {
  $types = entity_get_info();
  return array_combine(array_keys($types), array_column($types, 'label'));
}

/**
 * Implementation of hook_hierarchical_select_children().
 */
function entityimport_hierarchical_select_children($parent, $params) {
  if (!$parent) {
    return array();
  }

  if (count(entityimport_hierarchical_select_lineage($parent, $params)) > 1) {
    return array();
  }

  $type = entity_get_info($parent);
  if (!$type || !isset($type['bundles'])) {
    return array();
  }
  $types = $type['bundles'];
  $k = array_keys($types);
  $keys = array();
  foreach($k as $kk => $vv) {
    $keys[$kk] = $parent . '|' . $vv;
  }
  $out = array_combine($keys, array_column($types, 'label'));
  return $out;
}

/**
 * Implements hook_hierarchical_select_lineage().
 */
function entityimport_hierarchical_select_lineage($item, $params) {
  return explode("|", $item) + array("");
}

/**
 * Implements hook_hierarchical_select_valid_item().
 */
function entityimport_hierarchical_select_valid_item($item, $params) {
  return TRUE;
}
/**
 * Implements hook_hierarchical_select_implementation_info().
 */
function entityimport_hierarchical_select_implementation_info() {
  return array(
    'hierarchy type' => t('Entity Type'),
    'entity type'    => t('N/A'),
  );
}

function my_entity_load($entity_type, $ids = FALSE, $conditions = array(), $limit = 0) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', $entity_type, '=');
  if ($ids) {
    $query->propertyCondition('id', $ids, "IN");
  }
  if ($conditions) {
    foreach ($conditions as $k => $v) {
      $query->propertyCondition($k, $v);
    }
  }
  if ($limit) {
    $query->range(0, $limit);
  }
  $result = $query->execute();
  if (!isset($result[$entity_type])) {
    return array();
  };
  $aids = array();
  $info = entity_get_info($entity_type);
  foreach($result[$entity_type] as $entity) {
    $id = isset($entity->{$info['entity keys']['id']}) ? $entity->{$info['entity keys']['id']} : FALSE;
    if ($id) {
      $aids[] = $id;
    }
  }
  return entity_load($entity_type, $aids);
}

function entityimport_my_get_settings_single($import_map) {
  static $settingss;
  if (isset($settingss[$import_map])) {
    return $settingss[$import_map];
  }
  $callback = 'entityimport_import_map_settings_' . $import_map;
  $settings = array();
  if (function_exists($callback)) {
    $settings = $callback();
  }
  $settingss[$import_map] = $settings;
  return $settingss[$import_map];
}

function entityimport_my_get_settings($id, $import_map = array()) {
  $settings = $id ? entityimport_my_get_settings_single($id) : $import_map;
  $settings = $settings + array(
    'single' => FALSE,
    'remove' => TRUE,
    'term_to_entity' => FALSE,
    'map' => '{}',
    'offset' => 0,
    'header' => TRUE,
    'to' => array('user', 'user|user')
  );
  $settings['map'] = is_array($settings['map']) ? $settings['map'] : json_decode($settings['map'], TRUE);
  return $settings;
}
